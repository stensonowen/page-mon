//  Periodically crawl web pages and alert the user of changes
//
//  Copyright (C) 2016  Owen Stenson
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>. 
//
//  More information in the enclosed `LICENSE' file


//This is a LALRPOP filetype which defines an attribute grammar 
// and which build.rs will compile into croncfg.rs.
// :setf rust
// vim: set syntax=rust:

use std::str::FromStr;
use ast;

grammar;

// Cron Grammar: 
//  mostly based on http://linux.die.net/man/5/crontab
//  see README for production rules
// 
// Note about whitespace:
//      LALRPOP does not treat whitespace as a token. Instead space and tab 
//      represent sometimes-optional delmiiters. Therefore whitespace can
//      be omitted when doing so would not cause ambiguity. 
//      For example, `*****https://google.com` must mean that every field 
//      is `*` (except the url), because `**` is never a valid token.
//      Numbers, however, are an exception to this exception, as in
//      `01234https://google.com`, `01234` will be treated as one number.
//      I'm pretty sure the whitespace rule can be simplified to "whitespace
//      is only necessary when it is between two digits".
//      But again, whitespace is never problematic. That is to say, the 
//      croncfg language includes every valid crontab line as well as 
//      every version of that line in which removing whitespace did not
//      introduce ambiguity.
//
// TODO: add parsing for environment setting? (e.g. mailto)

pub Line: ast::Line = {
    <cmd:Command>   => ast::Line::Cmd(cmd),
    <Comment>,
    <Var>           => ast::Line::VarSet(<>),
};

pub Var: ast::Var = {
    //r"(?i)email" "=" <v:Email>              => ast::Var::Email(v.to_string()),
    //r"(?i)pushjet_secret" "=" <v:Secret>    => ast::Var::PJ_Secret(v),
    //r"(i)dir" "=" <v:Dir>                   => ast::Var::DataDir(v.to_string()),
    //"let " r"(?i)dir" "=" <v:Text>     => ast::Var::DataDir(v),
};

//Variable name: alphanumeric chars
//VarLHS = r"[A-Za-z]\w*";
//Text = r"\w+";

//Dir = "/.*";
//Email regex
//Email = r"[\w._%+-]+@[\w.-]+\.[\w]{2,}";

//Pushjet Secret regex
//Secret = r"[0-9a-fA-F]{32}";

//misc text; used for directory path
//will `\S` allow excaped spaces?
//Text = r"\S*";



pub Command: ast::Command = {
    <t:Time> <a:Action>	=> ast::Command { time:t, act:a },
};


Action: ast::Action = {
    <u:Url>                     => ast::Action { url:u.to_owned(), contact:None },
    <u:Url> "->" <c:Contact>    => ast::Action { url:u.to_owned(), contact:Some(c) },
};


Contact: ast::Contact = {
    r"(?i)email"    => ast::Contact::Email,
    r"(?i)text"     => ast::Contact::Text,
};


Time: ast::Time = {
    <a:Entry> <b:Entry> <c:Entry> <d:Entry_Month> <e:Entry_Day> => 
        ast::Time { minute:a, hour:b, date:c, month:d, weekday:e },
    <Nickname>,
};
    

use ast::{ZERO, ONE, STAR};
Nickname: ast::Time = {
    r"(?i)@yearly"  => ast::Time::from(ZERO, ZERO, ONE , ONE , STAR),
    r"(?i)@annually"=> ast::Time::from(ZERO, ZERO, ONE , ONE , STAR),
    r"(?i)@monthly" => ast::Time::from(ZERO, ZERO, ONE , STAR, STAR),
    r"(?i)@weekly"  => ast::Time::from(ZERO, ZERO, STAR, STAR, ZERO),
    r"(?i)@daily"   => ast::Time::from(ZERO, ZERO, STAR, STAR, STAR),
    r"(?i)@hourly"  => ast::Time::from(ZERO, STAR, STAR, STAR, STAR),
};


Comment: ast::Line = {
    r"#.*" => ast::Line::Comment,
};

Entry_Day = {
    <Entry>,
    <d:DayOfWeek> => vec![ast::Value::Constant(d)],
};

Entry_Month = {
    <Entry>,
    <m:MonthOfYear> => vec![ast::Value::Constant(m)],
};

Entry = Comma<Value>; 

Comma<Value>: Vec<Value> = {
    <val:Value> <vec:("," <Value>)*> => {
        let mut vec = vec;
        vec.push(val);
        vec
    }
};

Value: ast::Value = {
    <n:Num>                 => ast::Value::Constant(n),
    <cv:ContVal>            => ast::Value::CV(cv),
    <cv:ContVal> <s:Skip>   => ast::Value::Skip(cv, s),
};

Skip = "/" <Num>;

ContVal: ast::ContVal = {   
    // "Continuous Values", i.e. not a skip or constant
    "*"                 => ast::ContVal::Asterisk,
    <n:Num> "-" <m:Num> => ast::ContVal::Range(n,m+1),    
    //Range Asymmetry: the cron man page defines ranges
    // to be inclusive, but Rust ranges omit the second 
    // value, e.g. 0..42 includes 0 but not 42.
    //It it best to correct for this error soon.
    //There can be some logic-checking on the AST after 
    // parsing finishes, but it shouldn't mutate it.
};
    
//Case insensitive by using regex with the `i` flag

DayOfWeek: u8 = {
    //starts from 0
    r"(?i)SUN" => 0,
    r"(?i)MON" => 1,
    r"(?i)TUE" => 2,
    r"(?i)WED" => 3,
    r"(?i)THU" => 4,
    r"(?i)FRI" => 5,
    r"(?i)SAT" => 6,
};

MonthOfYear: u8 = {
    //starts from 1
    r"(?i)JAN" => 1,
    r"(?i)FEB" => 2,
    r"(?i)MAR" => 3,
    r"(?i)APR" => 4,
    r"(?i)MAY" => 5,
    r"(?i)JUN" => 6,
    r"(?i)JUL" => 7,
    r"(?i)AUG" => 8,
    r"(?i)SEP" => 9,
    r"(?i)OCT" => 10,
    r"(?i)NOV" => 11,
    r"(?i)DEC" => 12,
};


Num: u8 = <n:r"[0-9]+"> => u8::from_str(n).unwrap();

//TODO: pick one
//Should urls have to start with http(s)?
//Option1 ('no') is more convenient but more prone to user-error 
//First char can't be \d, so there would be a weird error if url were
// an IP address that didn't start with http(s).
//  e.g. Option 1: `google.com` is well-formed but `8.8.8.8` is not
//  e.g. Option 2: `https://google.com` and `https://8.8.8.8` are well-formed
//Url could be parsed that starts with a special character, which 
// could disguise errors; 
//  e.g. Option 1: `*****google.com` and `******google.com` both well-formed
//  e.g. Option 2: `*****https://google.com` is well-formed 
//      but `******https://google.com` is not
//Url = r"[^0-9\s]+";               //Option1
//Url = r"https?://.+[\d\w-\.]+";     //Option2
Url = r"https?://[\S]+";     //Option2
//Would be ambiguous (c.f. Num) if url started with [\d] 
//Easier to just require http/https before url

